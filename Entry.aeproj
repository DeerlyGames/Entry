-- These values automatically update throughout the project.
ENTRY_VERSION_MAJOR=0
ENTRY_VERSION_MINOR=2
ENTRY_VERSION_PATCH=1

ENTRY_VERSION=ENTRY_VERSION_MAJOR.."."..ENTRY_VERSION_MINOR.."."..ENTRY_VERSION_PATCH

solution "Entry"
	configurations{ "Debug", "Release" }
	flags { "StaticRuntime" }
	language "C++"
	location ""

filter "configurations:Debug"
	warnings 	"Extra"
	symbols     "On"
	defines {"DEBUG"}

filter "configurations:Release"
	flags       { "NoBufferSecurityCheck", "NoRuntimeChecks" }
	optimize    "Full"

filter { "system:macosx", "action:gmake" }
	toolset "clang"
	buildoptions { "-mmacosx-version-min=10.9", "-stdlib=libc++" }
	linkoptions  { "-mmacosx-version-min=10.9" }	

filter { "system:linux" }
	linkoptions { "-rdynamic -static-libgcc -static-libstdc++" }


group "Samples"
project "HelloWorld"
	location 	"Build"
	kind 		"SharedLib"
	files
	{ 
		"Samples/HelloWorld.cpp"
	}

project "SimpleLoop"
	location 	"Build"
	kind 		"SharedLib"
	files 		{ "Samples/SimpleLoop.cpp" }

project "Window"
	location 	"Build"
	kind 		"SharedLib"
	files 		{ "Samples/Window.cpp" }

	defines
	{
		"DECLSPEC=",
		"SDL_VIDEO_RENDER_D3D11=0",
		"SDL_VIDEO_RENDER_OGL=0",
		"SDL_VIDEO_RENDER_ES2=0",
		"SDL_VIDEO_RENDER_OGL_ES2=0"
	}

	includedirs
	{ 
		"Samples",
		"Samples/SDL2/include",
		"Samples/SDL2/src" 
	}

	files
	{
		"Samples/SDL2/src/*.c",
		"Samples/SDL2/src/atomic/*.c",
		"Samples/SDL2/src/audio/*.c",
		"Samples/SDL2/src/cpuinfo/*.c",
		"Samples/SDL2/src/dynapi/*.c",
		"Samples/SDL2/src/events/*.c",
		"Samples/SDL2/src/file/*.c",
		"Samples/SDL2/src/haptic/*.c",
		"Samples/SDL2/src/joystick/*.c",
		"Samples/SDL2/src/libm/*.c",
		"Samples/SDL2/src/power/*.c",
		"Samples/SDL2/src/render/*.c",
		"Samples/SDL2/src/render/software/*.c",
		"Samples/SDL2/src/stdlib/*.c",
		"Samples/SDL2/src/thread/*.c",
		"Samples/SDL2/src/timer/*.c",
		"Samples/SDL2/src/video/*.c",
		"Samples/SDL2/src/video/dummy/*.c"	
	}

	filter { "system:android" }
		defines { "GL_GLEXT_PROTOTYPES" }
		links{ "android", "GLESv1_CM", "GLESv2", "dl", "log"}
		files 
		{ 
			"Samples/SDL2/src/audio/android/*.c",
			"Samples/SDL2/src/core/android/*.c",
			"Samples/SDL2/src/filesystem/android/*.c", -- Maybe not needed
			"Samples/SDL2/src/haptic/dummy/*.c",
			"Samples/SDL2/src/joystick/android/*.c",
			"Samples/SDL2/src/loadso/dlopen/*.c",
			"Samples/SDL2/src/loadso/dummy/*.c",
			"Samples/SDL2/src/power/android/*.c", -- Maybe not needed
			"Samples/SDL2/src/thread/pthread/*.c",
			"Samples/SDL2/src/timer/unix/*.c", -- Maybe not needed
			"Samples/SDL2/src/video/android/*.c"
		}

	filter {"system:linux"}
		defines { "_REENTRANT", "HAVE_LINUX_VERSION_H"}
		links{ "dl", "pthread" }
		files 
		{ 
			"Samples/SDL2/src/core/linux/SDL_evdev.c",
			"Samples/SDL2/src/core/linux/SDL_udev.c",
			"Samples/SDL2/src/filesystem/unix/*.c", -- Maybe not needed
			"Samples/SDL2/src/haptic/linux/*.c",
			"Samples/SDL2/src/joystick/linux/*.c",
			"Samples/SDL2/src/loadso/dlopen/*.c",
			"Samples/SDL2/src/loadso/dummy/*.c",
			"Samples/SDL2/src/power/linux/*.c", -- Maybe not needed
			"Samples/SDL2/src/thread/pthread/*.c",
			"Samples/SDL2/src/timer/unix/*.c",
			"Samples/SDL2/src/video/x11/*.c"
		}
		includedirs
		{
			"/usr/include/mircommon",
			"/usr/include/mirclient"
		}
	filter {"system:windows"}

		linkoptions{"/ignore:4006"}
		defines{ 	"HAVE_LIBC=0" }
		files 
		{	
			"Samples/SDL2/src/core/windows/*.c",
			"Samples/SDL2/src/filesystem/windows/*.c", -- Maybe not needed
			"Samples/SDL2/src/haptic/windows/*.c",
			"Samples/SDL2/src/joystick/windows/*.c",
			"Samples/SDL2/src/loadso/windows/*.c",
			"Samples/SDL2/src/power/windows/*.c", -- Maybe not needed
			"Samples/SDL2/src/render/direct3d/*.c", -- Maybe not needed
			"Samples/SDL2/src/thread/generic/SDL_syscond.c",
			"Samples/SDL2/src/thread/windows/*.c",
			"Samples/SDL2/src/timer/windows/*.c",
			"Samples/SDL2/src/video/windows/*.c"
		}
		links { "Gdi32", "Iphlpapi", "Imm32", "Ole32", "OleAut32", "OpenGL32", "Version", "Winmm" }


group ""
project "EntryMain"
	location "Build"
	targetname "Entry"
	kind "ConsoleApp"

	files
	{ 
		"Source/*.cpp",
		"Source/*.h"
	}

	filter {"system:windows"}
		files {"Source/Entry.rc"}
	filter {"system:web"}
		linkoptions{"-s MAIN_MODULE=1 --embed-file Web/Debug/libSimpleLoop.js"}	
	filter{}

if _ACTION == "clean" then
	os.rmdir("Entry.xcworkspace")
	os.rmdir("Build")
	os.rmdir(".vs")
	os.remove("Entry.VC.db")
	os.remove("Entry.vcxproj")
	os.remove("Entry.make")
	os.remove("*.sln")
	os.remove("*.sdf")
	os.remove("*.opendb")
	os.remove("*.opensdf")
	os.remove("Makefile")
end

newaction {
	trigger = "zip",
	description = "Used by CI to zip a deployable version.",
	execute = function ()
		print ("Not yet implemented.")
	end
}

-- The following snippets updates all relevant version numbers.
local EntryBase = io.open("Source/Entry.h", "r")
Lines = {}
local versionChanged = false
for line in EntryBase:lines() do
	if string.find(line, "define ENTRY_VERSION_MAJOR") then
		if(tonumber(string.match(line, "%d+"))~=ENTRY_VERSION_MAJOR) then
			line="#define ENTRY_VERSION_MAJOR "..ENTRY_VERSION_MAJOR
			EntryBase = true
		end
	elseif string.find(line, "define ENTRY_VERSION_MINOR") then
		if(tonumber(string.match(line, "%d+"))~=ENTRY_VERSION_MINOR) then
			line="#define ENTRY_VERSION_MINOR "..ENTRY_VERSION_MINOR
			versionChanged = true
		end
	elseif string.find(line, "define ENTRY_VERSION_PATCH") then
		if(tonumber(string.match(line, "%d+"))~=ENTRY_VERSION_PATCH) then
			line="#define ENTRY_VERSION_PATCH "..ENTRY_VERSION_PATCH
			versionChanged = true
		end
	end
	Lines[#Lines+1] = line
end

if(versionChanged == true) then
	local EntryBase = io.open("Source/Entry.h", "w");
	for i = 1, #Lines do
		EntryBase:write( string.format( "%s\n", Lines[i]) )
	end
	EntryBase:flush()
	EntryBase:close()
else
	EntryBase:close()
end

-- Windows Resource Files
-- Updates VersionNumbers
local versionrc = io.open("Source/Entry.rc", "r")
Lines = {}
for line in versionrc:lines() do
	if string.find(line, "FILEVERSION") then
		line = string.format( " FILEVERSION %s,%s,%s,0",ENTRY_VERSION_MAJOR,
														ENTRY_VERSION_MINOR,
														ENTRY_VERSION_PATCH)
	end
	if string.find(line, "PRODUCTVERSION") then
		line = string.format( " PRODUCTVERSION %s,%s,%s,0",	ENTRY_VERSION_MAJOR,
															ENTRY_VERSION_MINOR,
															ENTRY_VERSION_PATCH)
	end
	if string.find(line, "FileVersion") then
		line = string.format( "            VALUE \"FileVersion\", \"%s.%s.%s\"",
															ENTRY_VERSION_MAJOR,
															ENTRY_VERSION_MINOR,
															ENTRY_VERSION_PATCH)
	end
	if string.find(line, "ProductVersion") then
		line = string.format( "            VALUE \"ProductVersion\", \"%s.%s.%s\"",
															ENTRY_VERSION_MAJOR,
															ENTRY_VERSION_MINOR,
															ENTRY_VERSION_PATCH)
	end
	Lines[#Lines+1] = line
end
versionrc:close()

local versionrc = io.open("Source/Entry.rc", "w");
for i = 1, #Lines do
	versionrc:write( string.format( "%s\n", Lines[i]) )
end
versionrc:flush()
versionrc:close()